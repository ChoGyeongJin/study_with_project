1. pom.xml에 spring-security를 지원하는 의존모듈 추가

		<!-- spring-security를 지원하는 의존모듈 -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>5.4.2</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>5.4.2</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>5.4.2</version>
		</dependency>

2. security-context.xml 파일을 appServlet폴더에 생성하기
- appServlet 폴더에서 마우스 오른쪽 클릭 > New > other > Spring Bean Configuration File 선택
- security-context 입력 후 Next > XSD 네임스페이스 선언 선택 항목에서 beans, security 체크 후
  하단 항목 중 첫번째 항목 체크 후 Finish 클릭
  
3. web.xml 파일에 servlet-conext.xml 파일이 파라미터로 입력된 곳에서 다음 줄에 servlet-context.xml
   파일과 같은 경로로 security-context.xml 추가하기
 
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				/WEB-INF/spring/appServlet/servlet-context.xml
				/WEB-INF/spring/appServlet/security-context.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
     
4. security-context.xml 파일에 BCryptPasswordEncoder 클래스 빈 등록하기

<bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>


5. MemberJoinService 클래스의 join()메소드에서 테스트 및 비밀번호 암호화 적용

@Service("mJoin")
@AllArgsConstructor
public class MemberJoinService implements MemberService {
	private MemberDAO dao;
	private BCryptPasswordEncoder cryptPasswordEncoder;
	
	public int join(MemberVO memberVO) {
		int result = 0;//회원가입 실패시 결과값
		
		try {
			//회원가입 정보 중 비밀번호 가져오기
			String member_pw = memberVO.getMember_pw();
			//비밀번호를 암호화시켜서 결과 확인하기
			String encodePassword = cryptPasswordEncoder.encode(member_pw);
			System.out.println("암호화된 비밀번호: "+encodePassword);
			System.out.println("암호화된 비밀번호 길이: "+encodePassword.length());
			
			//원 비밀번호와 암호화된 비밀번호가 일치하는지 여부 확인하기
			System.out.println("원 비밀번호와 암호화된 비밀번호 일치 여부: "+cryptPasswordEncoder.matches(member_pw, encodePassword));
			
			//암호화된 비밀번호를 memberVO에 세팅하기
			memberVO.setMember_pw(encodePassword);
			
			result=dao.join(memberVO);
			
			
		} catch (SQLException e) {e.printStackTrace();}
		
		return result;
	}

}


6. 비밀번호 암호화 적용하여 회원정보 DB 입력 전 tbl_member테이블의 member_pw컬럼의 크기를 변경해줌
(암호화된 비밀번호 길이: 60)

alter table tbl_member modify member_pw varchar(100) not null;

변경 후 테이블 확인하기
desc tbl_member;


7. 로그인에 암호화된 비밀번호 비교구문 적용하기: MemberLoginService, MemberDAO, MemberMapper

1) MemberLoginService 클래스

@Service("mLogin")
@AllArgsConstructor
public class MemberLoginService implements MemberService {
	private MemberDAO dao;
	private BCryptPasswordEncoder cryptPasswordEncoder;
	
	@Override
	public MemberVO login(String member_id, String member_pw) {
		MemberVO memberVO = null;//회원가입 실패시 결과값
		
		try {		
			
			//아이디를 이용해서 DB에 저장된 암호화된 비밀번호를 가져와서
			//로그인으로 입력된 비밀번호와 비교함
			String encodePassword = dao.getPassword(member_id);
			if(encodePassword != null) {//아이디가 유효한 경우
				
				if(cryptPasswordEncoder.matches(member_pw, encodePassword)) {
				//암호화된 비밀번호와 로그인으로 입력된 비밀번호가 일치하는 경우
				//matches(원 비빌번호, 암호화된 비밀번호)	
					memberVO = dao.login(member_id);
				}
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return memberVO;
	}

}


2) MemberDAO 클래스에서 기존의 로그인 처리구문 변경

	//로그인 처리하기
	public MemberVO login(String member_id) throws SQLException{
		return sqlSession.selectOne(MAPPER+".login", member_id);
	}
	
	//비밀번호 가져오기
	public String getPassword(String member_id) {
		return sqlSession.selectOne(MAPPER+".getPassword", member_id);
	}


3) MemberMapper.xml 에서 기존의 로그인 처리구문 변경

	<!-- 로그인 -->
	<select id="login" parameterType="string" resultType="memberVO">
		select * from tbl_member where member_id = #{member_id}
	</select>
	
	<!-- 비밀번호 가져오기 -->
	<select id="getPassword" parameterType="string" resultType="string">
		select member_pw from tbl_member where member_id = #{member_id} and cancel_or_not=0 
	</select>


8. 회원정보 변경에 암호화된 비밀번호 적용하기: update.jsp, MemberUpdateService

1) update.jsp 페이지에서 추가 구문: member_id를 hidden 태그로 추가하고 기존의 태그에서 name 속성을 삭제함

	<form name="frm_update" method="post" action="updateProcess.do">
	   <input type="hidden" name="m_idx" value="${member.m_idx}">
	   <input type="hidden" name="member_id" value="${member.member_id}">
	   <table>
	       <tr>
	           <td><input type="text" id="member_id" value="${member.member_id}" disabled></td>
	       </tr>


2) MemberUpdateService 클래스

@Service("mUpdate")
@AllArgsConstructor
public class MemberUpdateService implements MemberService {
	private MemberDAO dao;
	private BCryptPasswordEncoder cryptPasswordEncoder;
	
	@Override
	public MemberVO update(MemberVO memberVO) {
		MemberVO newVO = null;//회원가입 실패시 결과값
		String member_pw = memberVO.getMember_pw();
		try {
			
			//회원정보 중 아이디를 이용해서 암호화된 비밀번호 가져오기
			String encodePassword = dao.getPassword(memberVO.getMember_id());
			
			if(member_pw.length() != 0) {//회원정보 수정페이지에서 새 비밀번호를 입력한 경우
				String newPassword = cryptPasswordEncoder.encode(member_pw);
				memberVO.setMember_pw(newPassword);
				
			}else {//새 비밀번호를 입력하지 않은 경우
				memberVO.setMember_pw(encodePassword);
			}
			newVO=dao.updateMember(memberVO);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return newVO;
	}
}

		
		
		